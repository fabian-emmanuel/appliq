use crate::enums::roles::Role;
use chrono::{DateTime, Local};
use serde::{Deserialize, Serialize};
use sqlx::FromRow;
use std::option::Option;
use utoipa::ToSchema;

/// # User Model
///
/// Represents a user in the AppliQ system.
/// This struct is used for database interaction (via `sqlx::FromRow`) and
/// is also a component of API responses (via `Serialize`, `ToSchema`),
/// though sensitive fields like `password` are typically skipped during serialization.
///
/// The `#[schema]` attributes provide OpenAPI documentation.
#[derive(Serialize, Deserialize, FromRow, Clone, Debug, PartialEq, ToSchema)]
#[schema(description = "Represents a user in the system.")]
pub struct User {
    /// Unique identifier for the user.
    /// Auto-generated by the database.
    #[schema(description = "Unique identifier for the user.", example = 1)]
    pub id: i64,
    #[schema(description = "User's first name.", example = "John")]
    pub first_name: String,
    #[schema(description = "User's last name.", example = "Doe")]
    pub last_name: String,
    #[schema(description = "User's email address.", example = "user@example.com")]
    pub email: String,

    #[serde(skip_serializing)]
    #[schema(description = "User's hashed password (not exposed in API responses).")]
    pub password: String,
    #[schema(description = "Role assigned to the user.")]
    pub role: Role,
    #[schema(description = "Timestamp of when the user was created.")]
    pub created_at: DateTime<Local>,
    #[schema(description = "Timestamp of when the user was last updated.")]
    pub updated_at: DateTime<Local>,

    #[serde(skip_serializing)]
    #[schema(description = "Timestamp of when the user was soft-deleted (not exposed in API responses).")]
    pub deleted_at: Option<DateTime<Local>>,

    #[serde(skip_serializing)]
    #[schema(description = "Flag indicating if the user is soft-deleted (not exposed in API responses).")]
    pub deleted: bool,

    #[schema(description = "Flag indicating if the user's email is verified.", example = true)]
    pub is_verified: bool,
    #[schema(description = "Timestamp of the user's last login.")]
    pub last_login_at: Option<DateTime<Local>>,

    /// User's hashed password.
    /// This field is critical for authentication but should never be exposed in API responses.
    /// `#[serde(skip_serializing)]` ensures it's not included in JSON output.
    #[serde(skip_serializing)]
    #[schema(description = "User's hashed password (not exposed in API responses).")]
    pub password: String,
    /// Role assigned to the user (e.g., Admin, User).
    /// Determines the user's permissions within the system.
    #[schema(description = "Role assigned to the user.")]
    pub role: Role,
    /// Timestamp indicating when the user account was created.
    #[schema(description = "Timestamp of when the user was created.")]
    pub created_at: DateTime<Local>,
    /// Timestamp indicating when the user account was last updated.
    #[schema(description = "Timestamp of when the user was last updated.")]
    pub updated_at: DateTime<Local>,

    /// Timestamp indicating when the user account was soft-deleted.
    /// `None` if the account is active.
    /// This field is not typically exposed in API responses.
    #[serde(skip_serializing)]
    #[schema(description = "Timestamp of when the user was soft-deleted (not exposed in API responses).")]
    pub deleted_at: Option<DateTime<Local>>,

    /// Flag indicating if the user account has been soft-deleted.
    /// `true` if deleted, `false` otherwise.
    /// This field is not typically exposed in API responses.
    #[serde(skip_serializing)]
    #[schema(description = "Flag indicating if the user is soft-deleted (not exposed in API responses).")]
    pub deleted: bool,

    /// Flag indicating if the user's email address has been verified.
    #[schema(description = "Flag indicating if the user's email is verified.", example = true)]
    pub is_verified: bool,
    /// Timestamp of the user's last successful login.
    /// `None` if the user has never logged in.
    #[schema(description = "Timestamp of the user's last login.")]
    pub last_login_at: Option<DateTime<Local>>,

    /// Counter for consecutive failed login attempts.
    /// Can be used for account lockout policies or security monitoring.
    /// This field is not typically exposed in API responses.
    #[serde(skip_serializing)]
    #[schema(description = "Number of failed login attempts (not exposed in API responses).")]
    pub failed_login_attempts: i32,
}

impl User {
    /// Creates a new `User` instance.
    ///
    /// Initializes a user with default values for several fields:
    /// - `id` is set to `0` (expected to be assigned by the database).
    /// - `role` defaults to `Role::User` if `None` is provided.
    /// - `created_at` and `updated_at` are set to the current time.
    /// - `deleted_at`, `deleted`, `is_verified`, `last_login_at`, `failed_login_attempts`
    ///   are set to their respective initial/default states (e.g., `false`, `None`, `0`).
    ///
    /// # Parameters
    /// - `first_name`: The user's first name.
    /// - `last_name`: The user's last name.
    /// - `email`: The user's email address.
    /// - `password`: The user's hashed password.
    /// - `role`: An optional `Role` for the user. Defaults to `Role::User` if `None`.
    ///
    /// # Returns
    /// A new `User` instance.
    pub fn new(
        first_name: String,
        last_name: String,
        email: String,
        password: String, // This should be the hashed password.
        role: Option<Role>,
    ) -> Self {
        let now = Local::now();
        Self {
            id: 0, // Database will assign the ID.
            first_name,
            last_name,
            email,
            password, // Store the pre-hashed password.
            role: role.unwrap_or_else(|| Role::User), // Default role if not specified.
            created_at: now,
            updated_at: now,
            deleted_at: None,
            deleted: false,
            is_verified: false, // Users typically start as not verified.
            last_login_at: None,
            failed_login_attempts: 0,
        }
    }
}
