use chrono::{DateTime, Local};
use serde::{Deserialize, Serialize};
use sqlx::FromRow;
use std::time::Duration;
use uuid::Uuid;
use log::info;

/// # Token Model
///
/// Represents a token used for purposes like password resets or email verification.
/// This struct is used for database interaction (via `sqlx::FromRow`) and
/// may be partially used in API responses or internal logic.
#[derive(Serialize, Deserialize, FromRow, Debug, Clone, PartialEq)]
pub struct Token {
    /// Unique identifier for the token.
    /// Auto-generated by the database.
    pub id: i64,
    /// Foreign key linking to the `User` this token belongs to.
    pub user_id: i64,
    /// The unique token string (e.g., a UUID).
    pub token: String,
    /// Timestamp indicating when this token expires and is no longer valid.
    pub expires_at: DateTime<Local>,
    /// Timestamp indicating when this token was created.
    pub created_at: DateTime<Local>,
    /// Flag indicating whether this token has already been used.
    pub used: bool,
}

impl Token {
    /// Creates a new `Token` instance for a given user.
    ///
    /// The `id` is initialized to `0` as it's expected to be set by the database.
    /// A new UUID v4 is generated for the `token` string.
    /// `created_at` is set to the current time.
    /// `expires_at` is set to a fixed duration from `created_at` (currently 10 minutes).
    /// `used` is initialized to `false`.
    ///
    /// # Parameters
    /// - `user_id`: The ID of the user for whom the token is generated.
    ///
    /// # Returns
    /// A new `Token` instance.
    pub fn new(user_id: i64) -> Self {
        let token_str = Uuid::new_v4().to_string();
        info!("Generated new token value: {}", token_str); // Logging the actual token string
        let now = Local::now();
        // Standard duration for password reset tokens is often between 10 minutes to 1 hour.
        // 600 seconds = 10 minutes. 660 seconds = 11 minutes.
        // Let's make it exactly 10 minutes for clarity.
        let expires_at = now + Duration::from_secs(600); // 10 minutes expiration

        Self {
            id: 0, // Database will assign the ID.
            user_id,
            token: token_str,
            expires_at,
            created_at: now,
            used: false,
        }
    }

    /// Checks if the token is currently valid.
    ///
    /// A token is considered valid if it has not been marked as `used`
    /// and its `expires_at` timestamp is in the future.
    ///
    /// # Returns
    /// `true` if the token is valid, `false` otherwise.
    pub fn is_valid(&self) -> bool {
        !self.used && self.expires_at > Local::now()
    }
}
