use crate::enums::application::{ApplicationType, InterviewType, Status, TestType};
use crate::payloads::application::{ApplicationRequest, ApplicationStatusRequest};
use chrono::{DateTime, Local};
use serde::{Deserialize, Serialize};
use sqlx::{Decode, FromRow};
use utoipa::ToSchema;

/// # Job Application Model
///
/// Represents a job application tracked by a user.
/// This struct is used for database interaction (via `sqlx::FromRow`) and
/// API responses (via `Serialize`, `ToSchema`).
///
/// The `#[schema]` attributes provide OpenAPI documentation.
#[derive(Serialize, Deserialize, FromRow, Clone, Debug, PartialEq, ToSchema)]
#[schema(description = "Represents a job application.")]
pub struct Application {
    /// Unique identifier for the application.
    /// Auto-generated by the database.
    #[schema(description = "Unique identifier for the application.", example = 1)]
    pub id: i64,
    #[schema(description = "Company name.", example = "Acme Corp")]
    pub company: String,
    #[schema(description = "Position applied for.", example = "Software Engineer")]
    pub position: String,
    #[schema(description = "Company website or job posting URL.", example = "https://acme.corp/careers")]
    pub website: Option<String>,
    #[schema(description = "Type of application.")]
    pub application_type: Option<ApplicationType>,
    #[schema(description = "Timestamp of when the application was created.")]
    pub created_at: DateTime<Local>,
    #[schema(description = "ID of the user who created the application.")]
    pub created_by: i64,
    #[schema(description = "Timestamp of when the application was last updated.")]
    pub updated_at: DateTime<Local>,
    #[serde(skip_serializing)]
    #[schema(description = "Timestamp of when the application was soft-deleted (not exposed in API responses).")]
    pub deleted_at: Option<DateTime<Local>>,
    /// Timestamp when the application was soft-deleted.
    /// This field is not typically exposed in API responses.
    #[serde(skip_serializing)]
    #[schema(description = "Timestamp of when the application was soft-deleted (not exposed in API responses).")]
    pub deleted_at: Option<DateTime<Local>>,
    /// Flag indicating if the application has been soft-deleted.
    /// This field is not typically exposed in API responses.
    #[serde(skip_serializing)]
    #[schema(description = "Flag indicating if the application is soft-deleted (not exposed in API responses).")]
    pub deleted: bool,
}

impl Application {
    /// Creates a new `Application` instance.
    ///
    /// The `id` is initialized to `0` as it's expected to be set by the database.
    /// `created_at` and `updated_at` are set to the current time.
    /// `deleted` is initialized to `false` and `deleted_at` to `None`.
    ///
    /// # Parameters
    /// - `company`: Name of the company.
    /// - `position`: Position applied for.
    /// - `website`: Optional URL of the job posting or company.
    /// - `application_type`: Optional type of application (e.g., Email, Website).
    /// - `user_id`: ID of the user creating this application.
    ///
    /// # Returns
    /// A new `Application` instance.
    pub fn new(
        company: String,
        position: String,
        website: Option<String>,
        application_type: Option<ApplicationType>,
        user_id: i64,
    ) -> Self {
        let now = Local::now();
        Self {
            id: 0, // Database will assign the ID.
            company,
            position,
            website,
            application_type,
            created_by: user_id,
            created_at: now,
            updated_at: now,
            deleted: false,
            deleted_at: None,
        }
    }

    /// Creates a new `Application` instance from an `ApplicationRequest` payload.
    ///
    /// Useful for converting API request data into a database model.
    ///
    /// # Parameters
    /// - `request`: A reference to the `ApplicationRequest` payload.
    /// - `user_id`: The ID of the user creating the application.
    ///
    /// # Returns
    /// A new `Application` instance.
    pub fn from_application_request(request: &ApplicationRequest, user_id: i64) -> Self {
        Self::new(
            request.company.clone(),
            request.position.clone(),
            request.website.clone(),
            request.application_type.clone(),
            user_id,
        )
    }
}

/// # Application Status Model
///
/// Represents a specific status event for a job application at a particular point in time.
/// This allows tracking the history of an application's progress.
/// Used for database interaction (`sqlx::FromRow`, `sqlx::Decode`) and API responses.
///
/// The `#[schema]` attributes provide OpenAPI documentation.
#[derive(Serialize, Deserialize, FromRow, Clone, Debug, PartialEq, Decode, ToSchema)]
#[schema(description = "Represents the status of a job application at a point in time.")]
pub struct ApplicationStatus {
    /// Unique identifier for this status entry.
    /// Auto-generated by the database.
    #[schema(description = "Unique identifier for the application status entry.", example = 1)]
    pub id: i64,
    /// Foreign key linking to the `Application` this status belongs to.
    #[schema(description = "ID of the application this status belongs to.", example = 1)]
    pub application_id: i64,
    #[schema(description = "Current status of the application.")]
    pub status_type: Status,
    #[schema(description = "Timestamp of when this status was recorded.")]
    pub created_at: DateTime<Local>,
    #[schema(description = "ID of the user who recorded this status.")]
    pub created_by: i64,
    #[schema(description = "Type of test, if applicable to this status.")]
    pub test_type: Option<TestType>,
    #[schema(description = "Type of interview, if applicable to this status.")]
    pub interview_type: Option<InterviewType>,
    /// Optional additional notes related to this status update (e.g., interview feedback, test details).
    #[schema(description = "Additional notes for this status.", example = "Initial screening call scheduled.")]
    pub notes: Option<String>,
}

impl ApplicationStatus {
    /// Creates a new `ApplicationStatus` instance.
    ///
    /// The `id` is initialized to `0` as it's expected to be set by the database.
    /// `created_at` is set to the current time.
    ///
    /// # Parameters
    /// - `application_id`: ID of the parent application.
    /// - `status_type`: The type of status (e.g., Applied, Interview, Rejected).
    /// - `test_type`: Optional type of test associated with this status.
    /// - `interview_type`: Optional type of interview associated with this status.
    /// - `notes`: Optional notes for this status entry.
    /// - `created_by`: ID of the user who recorded this status.
    ///
    /// # Returns
    /// A new `ApplicationStatus` instance.
    pub fn new(
        application_id: i64,
        status_type: Status,
        test_type: Option<TestType>,
        interview_type: Option<InterviewType>,
        notes: Option<String>,
        created_by: i64,
    ) -> Self {
        Self {
            id: 0, // Database will assign the ID.
            application_id,
            status_type,
            created_at: Local::now(),
            created_by,
            test_type,
            interview_type,
            notes,
        }
    }

    /// Creates a new `ApplicationStatus` instance from an `ApplicationStatusRequest` payload.
    ///
    /// Useful for converting API request data for adding a status into a database model.
    ///
    /// # Parameters
    /// - `request`: A reference to the `ApplicationStatusRequest` payload.
    /// - `user_id`: The ID of the user recording the status.
    ///
    /// # Returns
    /// A new `ApplicationStatus` instance.
    pub fn from_application_status_request(
        request: &ApplicationStatusRequest,
        user_id: i64,
    ) -> Self {
        Self::new(
            request.application_id.clone(),
            request.status_type.clone(),
            request.test_type.clone(),
            request.interview_type.clone(),
            request.notes.clone(),
            user_id, // This is `created_by` for the status.
        )
    }
}
